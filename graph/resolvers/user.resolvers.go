package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"api/ent"
	"api/graph/models"
	"context"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	entity, err := ent.FromContext(ctx).User.Create().SetInput(input).Save(ctx)
	if err == nil && len(r.UserListenners) > 0 {
		go NotifyUserListenners(r, models.EventCreate, entity)
	}
	return entity, err
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, input ent.UpdateUserInput) (*ent.User, error) {
	entity, err := ent.FromContext(ctx).User.UpdateOneID(id).SetInput(input).Save(ctx)
	if err == nil && len(r.UserListenners) > 0 {
		go NotifyUserListenners(r, models.EventUpdate, entity)
	}
	return entity, err
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int) (*ent.User, error) {
	entity, err := r.Client.User.Get(ctx, id)
	if err == nil && len(r.UserListenners) > 0 {
		go NotifyUserListenners(r, models.EventDelete, entity)
	}
	return entity, ent.FromContext(ctx).User.DeleteOneID(id).Exec(ctx)
}

// User is the resolver for the User field.
func (r *queryResolver) User(ctx context.Context, id int) (*ent.User, error) {
	return r.Client.User.Get(ctx, id)
}

// User is the resolver for the user field.
func (r *subscriptionResolver) User(ctx context.Context, events []models.Event, id *int) (<-chan *models.UserEvent, error) {
	channel := make(chan *models.UserEvent, 1)
	r.UserListennersMutex.Lock()
	r.UserListenners[&channel] = UserListenner{
		ID:      id,
		Events:  events,
		Channel: channel,
	}
	println(channel, "Subscribed", "User")
	go func() {
		<-ctx.Done()
		println(channel, "Unsubscribed", "User")
		delete(r.UserListenners, &channel)
	}()
	r.UserListennersMutex.Unlock()
	return channel, nil
}

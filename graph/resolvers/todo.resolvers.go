package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"api/ent"
	"api/graph/generated"
	"api/graph/models"
	"context"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input ent.CreateTodoInput) (*ent.Todo, error) {
	entity, err := ent.FromContext(ctx).Todo.Create().SetInput(input).Save(ctx)
	if err == nil && len(r.TodoListenners) > 0 {
		go NotifyTodoListenners(r, models.EventCreate, entity)
	}
	return entity, err
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id int, input ent.UpdateTodoInput) (*ent.Todo, error) {
	entity, err := ent.FromContext(ctx).Todo.UpdateOneID(id).SetInput(input).Save(ctx)
	if err == nil && len(r.TodoListenners) > 0 {
		go NotifyTodoListenners(r, models.EventUpdate, entity)
	}
	return entity, err
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id int) (*ent.Todo, error) {
	entity, err := r.Client.Todo.Get(ctx, id)
	if err == nil && len(r.TodoListenners) > 0 {
		go NotifyTodoListenners(r, models.EventDelete, entity)
	}
	return entity, ent.FromContext(ctx).Todo.DeleteOneID(id).Exec(ctx)
}

// Todo is the resolver for the Todo field.
func (r *queryResolver) Todo(ctx context.Context, id int) (*ent.Todo, error) {
	return r.Client.Todo.Get(ctx, id)
}

// Todo is the resolver for the todo field.
func (r *subscriptionResolver) Todo(ctx context.Context, events []models.Event, id *int) (<-chan *models.TodoEvent, error) {
	channel := make(chan *models.TodoEvent, 1)
	r.TodoListennersMutex.Lock()
	r.TodoListenners[&channel] = TodoListenner{
		ID:      id,
		Events:  events,
		Channel: channel,
	}
	println(channel, "Subscribed", "Todo")
	go func() {
		<-ctx.Done()
		println(channel, "Unsubscribed", "Todo")
		delete(r.TodoListenners, &channel)
	}()
	r.TodoListennersMutex.Unlock()
	return channel, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
